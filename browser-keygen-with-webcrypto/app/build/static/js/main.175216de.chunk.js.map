{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["KeyGen","props","state","algorithm","curve","bits","usage","event","value","target","this","setState","Object","assign","indexOf","name","modulusLength","publicExponent","Uint8Array","hash","namedCurve","crypto","subtle","generateKey","keys","setKeys","React","Component","CAKeyGen","id","href","className","htmlFor","onChange","setAlgorithm","default","disabled","setKeySize","setCurve","onClick","generate","CertKeyGen","CSRForm","subject","city","country","orgunit","org","field","changed","pkcs10","CertificationRequest","version","typesAndValues","push","AttributeTypeAndValue","type","asn1js","subjectPublicKeyInfo","importKey","cert_keys","publicKey","attributes","digest","subjectPublicKey","valueBlock","valueHex","checksum","Attribute","values","Extensions","extensions","Extension","extnID","critical","extnValue","toBER","toSchema","sign","privateKey","setCSR","onSubmit","preventDefault","setFormValue","SignForm","signed","Certificate","console","log","toJSON","serialNumber","expiration","Date","setDate","getDate","notBefore","notAfter","issuer","csr","toBase64","arrayBufferToString","encodeTBS","ca_keys","bytes","setCert","App","cert","data","result","line","char","length","setCAKeys","bind","setCertKeys","toPEM","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.175216de.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport * as asn1js from \"asn1js\";\nimport { arrayBufferToString, toBase64 } from \"pvutils\";\nimport {\n  Attribute, AttributeTypeAndValue, CertificationRequest,\n  Certificate, Extension, Extensions\n} from \"pkijs\";\n\nclass KeyGen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      algorithm: \"\",\n      curve: \"\",\n      bits: \"\",\n      usage: ['sign', 'verify'],\n    };\n  }\n\n  setAlgorithm(event) {\n    var value = event.target.value;\n    this.setState((state) => Object.assign({}, state, { algorithm: value }));\n  }\n\n  setKeySize(event) {\n    var bits = +event.target.value;\n    this.setState((state) => Object.assign({}, state, { bits: bits }));\n  }\n\n  setCurve(event) {\n    var curve = event.target.value;\n    this.setState((state) => Object.assign({}, state, { curve: curve }));\n  }\n\n  async generate() {\n    var algorithm = {};\n    if (this.state.algorithm === \"RSA\") {\n      if (this.state.usage.indexOf('sign') !== -1 || this.state.usage.indexOf('verify') !== -1 ) {\n          algorithm.name = \"RSA-PSS\";\n      } else {\n          algorithm.name = \"RSA-OAEP\";\n      }\n      algorithm.modulusLength = +this.state.bits;\n      algorithm.publicExponent = new Uint8Array([1, 0, 1]);\n      algorithm.hash = {\"name\": \"SHA-256\"};\n    } else {\n      algorithm.name = \"ECDSA\";\n      algorithm.namedCurve = this.state.curve;\n    }\n\n    var keys = await crypto.subtle.generateKey(algorithm, true /* extractable */, this.state.usage);\n    this.props.setKeys(keys);\n  }\n}\n\nclass CAKeyGen extends KeyGen {\n  render() {\n    return (\n      <div id=\"ca-keygen\">\n        <h3>(DEMO ONLY) Generate CA Keys (DEMO ONLY)</h3>\n        <p>\n          This won't be here ordinarily. This just exists to make this demo\n          testable with <a href=\"https://fortifyapp.com/\">Fortify</a>, without\n          needing a RHCS instance.\n        </p>\n        <div className=\"input-field\">\n          <label htmlFor=\"ca-keytype\">CA Key Type</label>\n          <select name=\"ca-keytype\" onChange={ (event) => this.setAlgorithm(event) } value={ this.state.algorithm }>\n            <option default disabled value=\"\">---</option>\n            <option value=\"RSA\">RSA</option>\n            <option value=\"ECDSA\">ECDSA</option>\n          </select>\n        </div>\n        {\n          this.state.algorithm === \"RSA\"\n          ? <div className=\"input-field\">\n              <label htmlFor=\"ca-keysize-rsa\">CA Key Size</label>\n              <select name=\"ca-keysize-rsa\" onChange={ (event) => this.setKeySize(event) } value={ \"\" + this.state.bits }>\n                <option default disabled value=\"\">---</option>\n                <option value=\"2048\">2048</option>\n                <option value=\"3072\">3072</option>\n                <option value=\"4096\">4096</option>\n              </select>\n            </div>\n          : null\n        }\n        {\n          this.state.algorithm === \"ECDSA\"\n          ? <div className=\"input-field\">\n              <label htmlFor=\"ca-keysize-ecdsa\">CA Key Curve</label>\n              <select name=\"ca-keysize-ecdsa\" onChange={ (event) => this.setCurve(event) } value={ \"\" + this.state.curve }>\n                <option default disabled value=\"\">---</option>\n                <option value=\"P-256\">P-256</option>\n                <option value=\"P-384\">P-384</option>\n                <option value=\"P-521\">P-521</option>\n              </select>\n            </div>\n          : null\n        }\n        {\n          (this.state.algorithm === \"RSA\" && this.state.bits !== \"\") ||\n          (this.state.algorithm === \"ECDSA\" && this.state.curve !== \"\")\n          ? <button onClick={ () => this.generate() }>Generate</button>\n          : null\n        }\n      </div>\n    );\n  }\n}\n\nclass CertKeyGen extends KeyGen {\n  render() {\n    return (\n      <div id=\"cert-keygen\">\n        <h3>Generate Cert Keys</h3>\n        <p>\n          When using fortify, these certificates should be generated onto the\n          card itself.\n        </p>\n        <div className=\"input-field\">\n          <label htmlFor=\"cert-keytype\">Cert Key Type</label>\n          <select name=\"cert-keytype\" onChange={ (event) => this.setAlgorithm(event) } value={ this.state.algorithm }>\n            <option default disabled value=\"\">---</option>\n            <option value=\"RSA\">RSA</option>\n            <option value=\"ECDSA\">ECDSA</option>\n          </select>\n        </div>\n        {\n          this.state.algorithm === \"RSA\"\n          ? <div className=\"input-field\">\n              <label htmlFor=\"cert-keysize-rsa\">Cert Key Size</label>\n              <select name=\"cert-keysize-rsa\" onChange={ (event) => this.setKeySize(event) } value={ \"\" + this.state.bits }>\n                <option default disabled value=\"\">---</option>\n                <option value=\"2048\">2048</option>\n                <option value=\"3072\">3072</option>\n                <option value=\"4096\">4096</option>\n              </select>\n            </div>\n          : null\n        }\n        {\n          this.state.algorithm === \"ECDSA\"\n          ? <div className=\"input-field\">\n              <label htmlFor=\"cert-keysize-ecdsa\">Cert Key Curve</label>\n              <select name=\"cert-keysize-ecdsa\" onChange={ (event) => this.setCurve(event) } value={ \"\" + this.state.curve }>\n                <option default disabled value=\"\">---</option>\n                <option value=\"P-256\">P-256</option>\n                <option value=\"P-384\">P-384</option>\n                <option value=\"P-521\">P-521</option>\n              </select>\n            </div>\n          : null\n        }\n        {\n          (this.state.algorithm === \"RSA\" && this.state.bits !== \"\") ||\n          (this.state.algorithm === \"ECDSA\" && this.state.curve !== \"\")\n          ? <button onClick={ () => this.generate() }>Generate</button>\n          : null\n        }\n      </div>\n    );\n  }\n}\n\nclass CSRForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      subject: null,\n      city: null,\n      state: null,\n      country: null,\n      orgunit: null,\n      org: null,\n    };\n  }\n\n  setFormValue(field, value) {\n    var changed = {};\n    changed[field] = value;\n\n    this.setState((state) => Object.assign({}, state, changed));\n  }\n\n  async generate() {\n    let pkcs10 = new CertificationRequest();\n\n    pkcs10.version = 0;\n\n    // Set the CSR's Subject\n    pkcs10.subject.typesAndValues.push(\n      new AttributeTypeAndValue({\n        type: \"2.5.4.3\",\n        value: new asn1js.PrintableString({ value: this.state.subject }),\n      })\n    );\n\n    // Import key\n    pkcs10.subjectPublicKeyInfo.importKey(this.props.cert_keys.publicKey);\n\n    // Set the SKI identifier\n    pkcs10.attributes = [];\n    var checksum = await crypto.subtle.digest(\n      { name: \"SHA-256\" },\n      pkcs10.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex\n    );\n\n    pkcs10.attributes.push(\n      new Attribute({\n        type: \"1.2.840.113549.1.9.14\", // pkcs-9-at-extensionRequest\n        values: [(\n          new Extensions({\n            extensions: [\n              new Extension({\n                extnID: \"2.5.29.14\",\n                critical: false,\n                extnValue: (new asn1js.OctetString({ valueHex: checksum })).toBER(false)\n              })\n            ]\n          })).toSchema()\n        ]\n      })\n    );\n\n    // Self-sign to finish the CSR.\n    await pkcs10.sign(this.props.cert_keys.privateKey, \"SHA-256\");\n\n    // var bytes = await pkcs10.toSchema().toBER(false);\n    this.props.setCSR(pkcs10);\n  }\n\n  render() {\n    return (\n      <form id=\"cert-csr-form\" onSubmit={ (event) => { event.preventDefault() ; this.generate() } }>\n        <h3>Generate Certificate Signing Request</h3>\n        <p>\n          In the future, this section will include additional fields and allow\n          the user to specify a local CSR to read via a form.\n        </p>\n        <div className=\"input-field\">\n          <label htmlFor=\"Subject\">Subject</label>\n          <input name=\"Subject\" type=\"text\" value={ this.subject } onChange={ (event) => this.setFormValue(\"subject\", event.target.value) } />\n        </div>\n        <button>Generate CSR</button>\n      </form>\n    );\n  }\n}\n\nclass SignForm extends React.Component {\n  async generate() {\n    var signed = new Certificate();\n\n    console.log(signed, signed.toJSON());\n\n    // Serial number is required.\n    signed.version = 0;\n    signed.serialNumber = new asn1js.Integer({ value: 42 });\n\n    // Keep cert expiration short and simple.\n    var expiration = new Date();\n    expiration.setDate(expiration.getDate() + 5);\n    signed.notBefore.value = new Date();\n    signed.notAfter.value = expiration;\n\n    // Add faked issuer information.\n    signed.issuer.typesAndValues.push(new AttributeTypeAndValue({\n        type: \"2.5.4.3\", // Country name\n        value: new asn1js.PrintableString({ value: \"RHCS-DEMO\" })\n    }));\n\n    signed.subject = this.props.csr.subject;\n    signed.subjectPublicKeyInfo = this.props.csr.subjectPublicKeyInfo;\n\n    console.log(signed, signed.toJSON());\n    console.log(signed, toBase64(arrayBufferToString(signed.encodeTBS().toBER(false))));\n\n    // Self-sign to finish the certificate.\n    await signed.sign(this.props.ca_keys.privateKey, \"SHA-256\");\n    // await signed.verify(this.props.ca_keys.publicKey);\n\n    console.log(signed.toJSON());\n\n    var bytes = await signed.toSchema().toBER(false);\n    this.props.setCert(bytes);\n  }\n\n  render () {\n    return (\n      <div id=\"cert-submission\">\n        <h3>Sign CSR</h3>\n        <p>\n          In the future, this will submit the CSR with the correct profile and\n          additional data to RHCS. Currently we're doing it locally to test if\n          this will work with smart cards.\n        </p>\n        <button onClick={ () => this.generate() }>Sign CSR with CA</button>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ca_keys: null,\n      cert_keys: null,\n      csr: null,\n      cert: null,\n    };\n  }\n\n  setCAKeys(keys) {\n    this.setState((state) => Object.assign({}, state, { ca_keys: keys }));\n  }\n\n  setCertKeys(keys) {\n    this.setState((state) => Object.assign({}, state, { cert_keys: keys }));\n  }\n\n  setCSR(csr) {\n    this.setState((state) => Object.assign({}, state, { csr }));\n  }\n\n  setCert(cert) {\n    this.setState((state) => Object.assign({}, state, { cert }));\n  }\n\n  toPEM(data) {\n    var result = \"\";\n    var line = \"\";\n\n    for (let char of data) {\n      if (line.length >= 64) {\n        result += line += \"\\r\\n\";\n        line = \"\";\n      }\n\n      line += char;\n    }\n\n    if (line !== \"\") {\n      result += line += \"\\r\\n\";\n    }\n\n    return result;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.ca_keys === null\n          ? <CAKeyGen setKeys={ this.setCAKeys.bind(this) } />\n          : <>\n              <div id=\"ca-keygen\">\n                <h3>(DEMO ONLY) Remove CA Keys (DEMO ONLY)</h3>\n                <button onClick={ () => this.setCAKeys(null) }>Delete CA Keys</button>\n              </div>\n              {\n                this.state.cert_keys === null\n                ? <CertKeyGen setKeys={ this.setCertKeys.bind(this) } />\n                : <>\n                    <div id=\"cert-keygen\">\n                      <h3>Remove Cert Keys</h3>\n                      <button onClick={ () => this.setCertKeys(null) }>Delete Cert Keys</button>\n                    </div>\n                    {\n                      this.state.csr === null\n                      ? <CSRForm cert_keys={ this.state.cert_keys } setCSR={ this.setCSR.bind(this) } />\n                      : <>\n                        {\n                          this.state.cert === null\n                          ? <SignForm ca_keys={ this.state.ca_keys } cert_keys={ this.state.cert_keys } csr={ this.state.csr } setCert={ this.setCert.bind(this) } />\n                          : <>\n                              <h3>Now check that the keys (CA and Cert) were created on the card.</h3>\n                              <p>For reference, this is the signed end-entity certificate below. For now, the generated CA certificate isn't included.</p>\n                              <pre>\n{\n  \"-----BEGIN CERTIFICATE-----\\r\\n\" +\n  this.toPEM(toBase64(arrayBufferToString(this.state.cert))) +\n  \"-----END CERTIFICATE-----\"\n}\n                              </pre>\n                            </>\n                        }\n                        </>\n                    }\n                  </>\n              }\n            </>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}