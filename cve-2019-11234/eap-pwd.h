#include <string.h>
#include <assert.h>
#include <stdio.h>
#include <openssl/bn.h>
#include <openssl/sha.h>
#include <openssl/ec.h>
#include <openssl/evp.h>
#include <openssl/hmac.h>

#define MAX_STRING_LEN 8192

typedef struct _pwd_session_t {
    uint16_t state;
#define PWD_STATE_ID_REQ                1
#define PWD_STATE_COMMIT                2
#define PWD_STATE_CONFIRM              3
    uint16_t group_num;
    uint32_t ciphersuite;
    uint32_t token;
    char peer_id[MAX_STRING_LEN];
    size_t peer_id_len;
    size_t mtu;
    uint8_t *in;      /* reassembled fragments */
    size_t in_pos;
    size_t in_len;
    uint8_t *out;     /* message to fragment */
    size_t out_pos;
    size_t out_len;
    EC_GROUP *group;
    EC_POINT *pwe;
    BIGNUM *order;
    BIGNUM *prime;
    BIGNUM *k;
    BIGNUM *private_value;
    BIGNUM *peer_scalar;
    BIGNUM *my_scalar;
    EC_POINT *my_element;
    EC_POINT *peer_element;
    uint8_t my_confirm[SHA256_DIGEST_LENGTH];
} pwd_session_t;

int process_peer_commit (pwd_session_t *session, uint8_t *in, size_t in_len, BN_CTX *bnctx);
int compute_server_confirm(pwd_session_t *session, uint8_t *out, BN_CTX *bnctx);
int compute_peer_confirm(pwd_session_t *sess, uint8_t *out, BN_CTX *bnctx);

#define ERROR(x) do { \
   printf("%s @ %d: %s\n", __FILE__, __LINE__, x);  \
} while(0);

#define DEBUG2 ERROR
#define REDEBUG ERROR
#define REDEBUG2 ERROR

BIGNUM *get_random_max(BIGNUM *max);
EC_POINT *get_random_EC_POINT(EC_GROUP *group, BIGNUM *order, BN_CTX *bnctx);
EC_POINT *get_point_from_hex(EC_GROUP *group, char *x_repr, char *y_repr, BN_CTX *bnctx);
void print_bn(char *prefix, BIGNUM *num);
void print_point(char *prefix, EC_GROUP *group, EC_POINT *p, BN_CTX *bnctx);
BIGNUM *compute_eap_pwd_scalar(BIGNUM *rand, BIGNUM *mask, BIGNUM *order,
        BN_CTX *bnctx);
EC_POINT *compute_eap_pwd_element(EC_POINT *pwe, BIGNUM *mask,
        EC_GROUP *group, BN_CTX *bnctx);
uint8_t *encode_attack(size_t *ret_len, EC_GROUP *group, BIGNUM *order,
        BIGNUM *prime, EC_POINT *element_p, BIGNUM *scalar_p, BN_CTX *bnctx);
void print_debug(int result, pwd_session_t *session, EC_POINT *element_p,
        BIGNUM *scalar_p, BN_CTX *bnctx);
